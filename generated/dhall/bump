#!/usr/bin/env ruby
# **NOTE**: this file is generated by `dhall-render`.
# You should NOT edit it manually, your changes will be lost.

require 'open3'

class Spec
	attr_reader :repo, :ref
	def initialize(repo, ref)
		@repo = repo
		@ref = ref
	end

	def unresolved?
		@resolved == nil
	end

	def to_s
		"#{@repo}:#{ref}"
	end

	def inspect
		"Spec(#{self})"
	end

	def resolved
		@resolved ||= begin
			puts "#{self}: resolving"
			token = ENV['GITHUB_TOKEN']
			creds = "x-access-token:#{token}@" unless token.nil?

			# Workaround for github actions, see https://github.com/timbertson/dhall-render/issues/6
			env = {'GIT_DIR' => '/dev/null'}
			stdout, status = Open3.capture2(env, 'git', 'ls-remote', "https://#{creds}github.com/#{@repo}", @ref)

			exit 1 unless status.success?
			lines = stdout.strip.lines.map(&:strip)
			raise "Couldn't extract a single ref from: #{lines.inspect}" unless lines.length == 1
			# puts lines.inspect
			line = lines.first
			sha, ref = line.split("\t", 2)
			resolved = if ref.start_with?("refs/tags")
				# assume tags are immutable
				@ref
			else
				sha
			end
			puts " -> #{resolved}"
			resolved
		end
	end

	def self.parse(spec)
		parts = spec.split(':', 2)
		raise "Invalid spec: #{spec}" if parts.size != 2
		Spec.new(*parts)
	end
end

def process(path, options)
	initial = File.read(path)
	contents = initial
	freeze_cmd = options.fetch(:freeze)
	options.fetch(:specs).each do |spec|
		contents = contents.gsub(/(\/#{Regexp.escape(spec.repo)}\/)[^\/]+/) do |x|
			match = Regexp.last_match
			prefix = match[1]
			"#{prefix}#{spec.resolved}"
		end
	end
	if contents != initial
		tmp_path = path + ".tmp"
		File.write(tmp_path, contents)
		puts "#{path}: freezing"
		cmd = freeze_cmd + [tmp_path]
		puts("+ #{cmd.join(' ')}")
		unless system(*cmd)
			puts("Freeze failed")
			exit(1)
		end
		File.rename(tmp_path, path)
	end
end

def main
	require 'optparse'

	default_freeze = [File.join(File.dirname($0), "fix"), "--freeze"]
	options = {
		freeze: default_freeze,
		specs: [],
	}
	args = OptionParser.new do |p|
		p.banner = [
			"Usage: bump [OPTIONS] INPUT_FILES",
			"",
			"Example: `bump --to timbertsion/dhall-render:master Render.dhall`",
			"Branches will be resolved to their current commit, tags will",
			"be left as-is (they are assumed immutable).",
			"",
			"If a file is modified, it'll be re-frozen to add digests.",
			"",
			"It's a failure if the a spec is not used in any input file.",
			"--to may be specified many times.",
			"\n",
		].join("\n")
		p.on('--to REPO:REF', "Bump the given REPO to REF") do |spec|
			options[:specs] << Spec.parse(spec)
		end
		p.on('--freeze-cmd=CMD', "Override freeze command (default: #{default_freeze.join(" ")})") do |cmd|
			require 'shellwords'
			options[:freeze] = Shellwords.split(cmd)
		end
	end.parse(ARGV)
	raise "path required" if args.empty?
	raise "--to required" if options.fetch(:specs).empty?

	args.each do |path|
		process(path, options)
	end
	unused = options.fetch(:specs).select(&:unresolved?)
	raise "ERROR: repositories not used: #{unused.inspect}" unless unused.empty?
end

main
